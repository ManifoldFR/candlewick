#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct TranformBlock
{
    float4x4 modelView;
    float4x4 mvp;
    float3x3 normalMatrix;
};

struct LightBlockV
{
    float4x4 lightMvp;
};

struct main0_out
{
    float3 fragViewPos [[user(locn0)]];
    float3 fragViewNormal [[user(locn1)]];
    float3 fragLightPos [[user(locn2)]];
    float4 gl_Position [[position, invariant]];
};

struct main0_in
{
    float3 inPosition [[attribute(0)]];
    float3 inNormal [[attribute(1)]];
};

vertex main0_out main0(main0_in in [[stage_in]], constant TranformBlock& _25 [[buffer(0)]], constant LightBlockV& _59 [[buffer(1)]])
{
    main0_out out = {};
    float4 hp = float4(in.inPosition, 1.0);
    out.fragViewPos = float3((_25.modelView * hp).xyz);
    out.fragViewNormal = fast::normalize(_25.normalMatrix * in.inNormal);
    float4 _53 = _25.mvp * hp;
    out.gl_Position = _53;
    float4 flps = _59.lightMvp * hp;
    out.fragLightPos = flps.xyz / float3(flps.w);
    return out;
}
