#pragma clang diagnostic ignored "-Wmissing-prototypes"
#pragma clang diagnostic ignored "-Wmissing-braces"

#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

template<typename T, size_t Num>
struct spvUnsafeArray
{
    T elements[Num ? Num : 1];

    thread T& operator [] (size_t pos) thread
    {
        return elements[pos];
    }
    constexpr const thread T& operator [] (size_t pos) const thread
    {
        return elements[pos];
    }

    device T& operator [] (size_t pos) device
    {
        return elements[pos];
    }
    constexpr const device T& operator [] (size_t pos) const device
    {
        return elements[pos];
    }

    constexpr const constant T& operator [] (size_t pos) const constant
    {
        return elements[pos];
    }

    threadgroup T& operator [] (size_t pos) threadgroup
    {
        return elements[pos];
    }
    constexpr const threadgroup T& operator [] (size_t pos) const threadgroup
    {
        return elements[pos];
    }
};

struct DebugTransform
{
    float4x4 invProj;
    float4x4 mvp;
    float4 color;
};

constant spvUnsafeArray<uint, 24> _19 = spvUnsafeArray<uint, 24>({ 0u, 1u, 0u, 2u, 2u, 3u, 1u, 3u, 4u, 5u, 4u, 6u, 6u, 7u, 5u, 7u, 0u, 4u, 1u, 5u, 2u, 6u, 3u, 7u });

struct main0_out
{
    float4 outColor [[user(locn0)]];
    float4 gl_Position [[position]];
};

vertex main0_out main0(constant DebugTransform& _64 [[buffer(0)]], uint gl_VertexIndex [[vertex_id]])
{
    main0_out out = {};
    uint cornerIdx = _19[int(gl_VertexIndex)];
    uint x = cornerIdx & 1u;
    uint y = (cornerIdx >> uint(1)) & 1u;
    uint z = (cornerIdx >> uint(2)) & 1u;
    float4 ndc = float4((2.0 * float(x)) - 1.0, (2.0 * float(y)) - 1.0, (2.0 * float(z)) - 1.0, 1.0);
    float4 viewPos = _64.invProj * ndc;
    viewPos /= float4(viewPos.w);
    out.gl_Position = _64.mvp * viewPos;
    out.outColor = _64.color;
    return out;
}
